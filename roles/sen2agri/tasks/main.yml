# Download and install sen2agri
#
# We assume that the install files are available
# at the remote site. If not add a task to copy the files, e.g.
## - name: Copy sen2agri install files
##   copy:
##     src: "{{ your local path }}/Sen2Agri-package-{{ sen2agri_version}}.zip"
##     dest: "{{ remote_install_path }}"

- name: create folder for sen2agri unzipped files
  file:
    path: "{{ remote_install_path }}"
    state: directory
    mode: '0774'

- name: unzip sen2agri package
  unarchive:
    src: "{{ remote_install_source }}/Sen2Agri-package-{{ sen2agri_version}}.zip"
    dest: "{{ remote_install_path }}"
    remote_src: yes

- name: create folder for srtm and swbd
  file:
    path: "{{ item }}"
    state: directory
    mode: '0777'
  with_items:
    - /mnt/archive/srtm
    - /mnt/archive/swbd

- name: unzip srtm.zip
  unarchive:
    src: "{{ remote_install_source }}/srtm.zip"
    dest: /mnt/archive/srtm
    remote_src: yes

# Need to delete the folder otherwise the next script will fail
- name: Ansible delete folder
  file:
    path: /usr/share/sen2agri/sen2agri-services
    state: absent
  become: yes

# Maybe it is better to use "expect" instead of "shell"
- name: install sen2agri
  shell: cd {{ remote_install_path }}/Sen2AgriDistribution/install_script && echo "2" | sudo ./sen2agriPlatformInstallAndConfig.sh
  become: yes

- name: fix user rights and group membership
  user:
    name: sen2agri-service
    group: {{ sen2agri-group }}
    groups: {{ sen2agri-groups }}
  become: yes

# Next steps are for using an external data base that is already existing and filled with data.
- name: Stop services
  service:
    name: "{{ item }}"
    state: stopped
  with_items:
    - sen2agri-demmaccs.service
    - sen2agri-http-listener.service
    - sen2agri-monitor-agent.service
    - sen2agri-orchestrator.service
    - sen2agri-scheduler.service
    - sen2agri-services.service
  become: yes

- name: Configure DB connection ConfigParams.php
  replace:
    path: /var/www/html/ConfigParams.php
    regexp: '{{ item.regexp }}'
    replace: '{{ item.line }}'
    backup: yes
  with_items:
    - { regexp: 'host=localhost', line: 'host={{ db_host }}' }
    - { regexp: 'password=sen2agri', line: 'password={{ db_pass }}' }
  become: yes

- name: Configure DB connection sen2agri.conf
  replace:
    path: /etc/sen2agri/sen2agri.conf
    regexp: '{{ item.regexp }}'
    replace: '{{ item.line }}'
    backup: yes
  with_items:
    - { regexp: 'HostName=localhost', line: 'HostName={{ db_host }}' }
    - { regexp: 'Password=sen2agri', line: 'Password={{ db_pass }}' }
  become: yes

- name: Configure DB connection sen2agri-ctl.py
  replace:
    path: /usr/bin/sen2agri-ctl.py
    regexp: '{{ item.regexp }}'
    replace: '{{ item.line }}'
    backup: yes
  with_items:
    - { regexp: "host='localhost'", line: "host='{{ db_host }}'" }
    - { regexp: "password='sen2agri'", line: "password='{{ db_pass }}'" }
  become: yes

- name: Configure DB connection services.properties
  replace:
    path: /usr/share/sen2agri/sen2agri-services/config/services.properties
    regexp: '{{ item.regexp }}'
    replace: '{{ item.line }}'
    backup: yes
  with_items:
    - { regexp: 'jdbc:postgresql://localhost', line: 'jdbc:postgresql://{{ db_host }}' }
    - { regexp: 'spring.datasource.password=sen2agri', line: 'spring.datasource.password={{ db_pass }}' }
  become: yes

- name: start sen2agri services
  service:
    name: sen2agri-services.service
    state: started
  become: yes
